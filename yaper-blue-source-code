using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace yaper
{
    class Program
    {
        static int port = 11000;
        static UdpClient receiver;
        static HashSet<string> onlineUsers = new HashSet<string>();
        static string myName = "";
        static DateTime lastMessageTime = DateTime.MinValue;
        const int maxMessageLength = 200;
        const int messageCooldownSeconds = 2;

        static void Main(string[] args)
        {
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.DarkCyan;
            Console.Clear();

            string targetIp = "255.255.255.255";

            receiver = new UdpClient(port);
            Thread receiveThread = new Thread(ReceiveMessages)
            {
                IsBackground = true
            };
            receiveThread.Start();

            UdpClient sender = new UdpClient();
            sender.EnableBroadcast = true;

            while (true)
            {
                Console.Write("YAPER ¬©2025. Enter a display name (no spaces allowed): ");
                myName = Console.ReadLine();

                if (string.IsNullOrWhiteSpace(myName) || myName.Contains(" "))
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("‚ùå Error: Display name cannot be empty or contain spaces. Please try again.");
                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                }
                else
                {
                    break;
                }
            }

            // Get interface info and SSID
            (string interfaceName, string localIp) = GetLocalInterfaceInfo();
            string ssid = GetWifiSSID();

            byte[] userPing = Encoding.UTF8.GetBytes($"__PING::{myName}");
            sender.Send(userPing, userPing.Length, new IPEndPoint(IPAddress.Broadcast, port));

            Console.Clear();
            Console.WriteLine($"YAPER ¬©2025. You can now start sending messages as {myName}.");
            Console.WriteLine($"üì° Connected via: {interfaceName} ({localIp}) on Wi-Fi \"{ssid}\"\n");

            while (true)
            {
                string input = Console.ReadLine()?.Trim();
                if (string.IsNullOrEmpty(input)) continue;

                if (input.Length > maxMessageLength)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"‚ùå Error: Message too long. Max length is {maxMessageLength} characters.");
                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                    continue;
                }

                if ((DateTime.Now - lastMessageTime).TotalSeconds < messageCooldownSeconds)
                {
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine($"‚è≥ Please wait {messageCooldownSeconds} seconds between messages.");
                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                    continue;
                }

                lastMessageTime = DateTime.Now;

                int currentLineCursor = Console.CursorTop - 1;
                Console.SetCursorPosition(0, currentLineCursor);
                Console.Write(new string(' ', Console.WindowWidth));
                Console.SetCursorPosition(0, currentLineCursor);

                string formattedMessage;

                if (input.StartsWith("/") && !input.StartsWith("//") && input.Contains(" "))
                {
                    int spaceIndex = input.IndexOf(' ');
                    string targetUser = input.Substring(1, spaceIndex - 1);
                    string messageBody = input.Substring(spaceIndex + 1).Trim();
                    formattedMessage = $"[{DateTime.Now:hh:mm:ss tt}] {myName} > {targetUser}: {messageBody}";
                }
                else
                {
                    formattedMessage = $"[{DateTime.Now:hh:mm:ss tt}] {myName}: {input}";
                }

                byte[] data = Encoding.UTF8.GetBytes(formattedMessage);
                sender.Send(data, data.Length, new IPEndPoint(IPAddress.Parse(targetIp), port));
            }
        }

        static void ReceiveMessages()
        {
            IPEndPoint remoteEP = new IPEndPoint(IPAddress.Any, port);

            while (true)
            {
                try
                {
                    byte[] data = receiver.Receive(ref remoteEP);
                    string message = Encoding.UTF8.GetString(data);

                    if (message.StartsWith("__PING::"))
                    {
                        string requester = message.Substring(8);
                        if (requester != myName)
                        {
                            string pong = $"__PONG::{myName}";
                            byte[] pongData = Encoding.UTF8.GetBytes(pong);
                            using (UdpClient pongSender = new UdpClient())
                            {
                                pongSender.Send(pongData, pongData.Length, remoteEP);
                            }
                        }
                        continue;
                    }

                    if (message.StartsWith("__PONG::"))
                    {
                        string responder = message.Substring(8);
                        if (responder != myName)
                        {
                            onlineUsers.Add(responder);
                        }
                        continue;
                    }

                    Console.WriteLine($"\n{message}");
                }
                catch
                {
                    Console.WriteLine("Error receiving message.");
                }
            }
        }

        static (string interfaceName, string ipAddress) GetLocalInterfaceInfo()
        {
            foreach (NetworkInterface ni in NetworkInterface.GetAllNetworkInterfaces())
            {
                if (ni.OperationalStatus == OperationalStatus.Up &&
                    ni.NetworkInterfaceType != NetworkInterfaceType.Loopback &&
                    ni.NetworkInterfaceType != NetworkInterfaceType.Tunnel)
                {
                    foreach (UnicastIPAddressInformation ip in ni.GetIPProperties().UnicastAddresses)
                    {
                        if (ip.Address.AddressFamily == AddressFamily.InterNetwork &&
                            !IPAddress.IsLoopback(ip.Address))
                        {
                            return (ni.Name, ip.Address.ToString());
                        }
                    }
                }
            }
            return ("Unknown Interface", "Unknown IP");
        }

        static string GetWifiSSID()
        {
            try
            {
                ProcessStartInfo psi = new ProcessStartInfo
                {
                    FileName = "netsh",
                    Arguments = "wlan show interfaces",
                    RedirectStandardOutput = true,
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                using (Process process = Process.Start(psi))
                {
                    string output = process.StandardOutput.ReadToEnd();
                    process.WaitForExit();

                    foreach (string line in output.Split('\n'))
                    {
                        if (line.TrimStart().StartsWith("SSID") && !line.TrimStart().StartsWith("SSID name"))
                        {
                            string[] parts = line.Split(new[] { ':' }, 2);
                            if (parts.Length == 2)
                                return parts[1].Trim();
                        }
                    }
                }
            }
            catch { }

            return "Unknown";
        }
    }
}
